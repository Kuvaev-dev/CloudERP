@model DatabaseAccess.tblTask

@{
    ViewBag.Title = "Create Task";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h3 class="text-danger">@ViewBag.Message</h3>
        <h3 class="text-danger">@ViewBag.ErrorMessage</h3>

        <div class="form-group">
            @Html.LabelFor(model => model.Title, "Task Title", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-5">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, "Description", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-5">
                @Html.TextAreaFor(model => model.Description, new { @class = "form-control", rows = 3 })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DueDate, "Due Date", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-5">
                @Html.EditorFor(model => model.DueDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DueDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ReminderDate, "Reminder Date", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-5">
                @Html.EditorFor(model => model.ReminderDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ReminderDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-5">
                <input type="submit" value="@Resources.Repeats.Create.ToString()" class="btn btn-success" />
                @Html.ActionLink(Resources.Repeats.BackToList.ToString(), "Index", null, new { @class = "btn btn-default" })
                <button id="voiceRecognitionButton" class="btn btn-link" type="button">
                    <i class="fas fa-microphone" style="font-size: 1.5em; color: gray;"></i>
                </button>
            </div>
        </div>
    </div>
}
<script>
    let activeElement = null;
    let recognition = null;
    let isListening = false;

    document.addEventListener('DOMContentLoaded', (event) => {
        document.addEventListener('focusin', (event) => {
            activeElement = event.target;
        });

        function initializeRecognition() {
            if (!('webkitSpeechRecognition' in window)) {
                alert('Ваш браузер не поддерживает голосовой ввод.');
                return;
            }

            recognition = new webkitSpeechRecognition();
            recognition.continuous = false;
            recognition.interimResults = false;
            recognition.lang = '@Session["Culture"]';

            recognition.onstart = function () {
                console.log('Голосовой ввод начался.');
                isListening = true;
                updateButtonState();
            };

            recognition.onresult = function (event) {
                if (activeElement) {
                    const transcript = event.results[0][0].transcript;
                    if (activeElement.tagName === 'TEXTAREA' || activeElement.type === 'text') {
                        activeElement.value = transcript;
                    }
                }
            };

            recognition.onerror = function (event) {
                if (event.error === 'no-speech') {
                    console.log('Ошибка: Никакая речь не была обнаружена.');
                } else {
                    alert('Ошибка голосового ввода: ' + event.error);
                }
            };

            recognition.onend = function () {
                console.log('Голосовой ввод завершен.');
                isListening = false;
                updateButtonState();
            };
        }

        function updateButtonState() {
            const buttonIcon = document.getElementById('voiceRecognitionButton').querySelector('i');
            if (isListening) {
                buttonIcon.style.color = 'red';
            } else {
                buttonIcon.style.color = 'gray';
            }
        }

        function toggleVoiceRecognition() {
            if (isListening) {
                recognition.stop();
            } else {
                recognition.start();
            }
            isListening = !isListening;
            updateButtonState();
        }

        initializeRecognition();

        const voiceRecognitionButton = document.getElementById('voiceRecognitionButton');
        voiceRecognitionButton.addEventListener('click', toggleVoiceRecognition);
    });
</script>