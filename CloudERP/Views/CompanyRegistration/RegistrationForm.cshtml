@model CloudERP.Models.RegistrationMV
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@using Localization.CloudERP.Modules.Company;
@using Localization.CloudERP.Modules.Branch;
@using Localization.CloudERP.Common;
@{
    ViewBag.Title = Company.AddNewCompany;
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/css/intlTelInput.css" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/js/intlTelInput.min.js"></script>

<script>
    window.Culture = '@HttpContextAccessor.HttpContext?.Session.GetString("Culture")';
</script>
<script src="~/js/CustomScripts/VoiceRecognition.js"></script>

<div class="card card-default col-md-12">
    <div class="card-header">
        @Html.Raw(Company.Registration)
        <button id="voiceRecognitionButton" class="btn btn-link" type="button">
            <i class="fas fa-microphone" style="font-size: 1.5em; color: gray;"></i>
        </button>
        <h5 class="text-danger">@ViewBag.Message</h5>
        <h5 class="text-danger">@ViewBag.ErrorMessage</h5>
    </div>
    <div class="card-body">
        @using (Html.BeginForm("RegistrationForm", "CompanyRegistration", FormMethod.Post, new { @id = "example-form" }))
        {
            @Html.AntiForgeryToken()

            @Html.HiddenFor(model => model.BranchContact, new { @id = "HiddenBranchContact" })
            @Html.HiddenFor(model => model.EmployeeContactNo, new { @id = "HiddenEmployeeContactNo" })

            <div>
                <h4>
                    @Html.Raw(Company.UserProfile)
                    <br>
                    <small>@Html.Raw(Company.EnterUserDetails)</small>
                </h4>
                <fieldset>
                    <div class="row">
                        <div class="col-md-4">
                            <label for="userName">@Html.Raw(Localization.CloudERP.Modules.User.User.UserName) *</label>
                            @Html.TextBoxFor(model => model.UserName, new { @class = "form-control required", @id = "UserName" })
                            @Html.ValidationMessageFor(model => model.UserName)
                        </div>
                    </div>
                    <p>(*) @Html.Raw(Company.Mandatory)</p>
                </fieldset>
                <h4>
                    @Html.Raw(Company.PersonalProfile)
                    <br>
                    <small>@Html.Raw(Company.EnterFocalPersonDetails)</small>
                </h4>
                <fieldset>
                    <div class="row">
                        <div class="col-md-4">
                            <label for="name">@Html.Raw(Localization.CloudERP.Modules.User.User.FullName) *</label>
                            @Html.TextBoxFor(model => model.EmployeeName, new { @class = "form-control required", @id = "EName" })
                            @Html.ValidationMessageFor(model => model.EmployeeName)
                        </div>
                        <div class="col-md-4">
                            <div class="form-group mb-3">
                                <label for="EmployeeContactNo" class="form-label">
                                    @Html.Raw(Localization.CloudERP.Modules.User.User.ContactNo) *
                                </label>
                                <div class="input-group">
                                    <input id="EmployeeContactNo" name="EmployeeContactNo" type="tel" class="form-control required" />
                                    @Html.ValidationMessageFor(model => model.EmployeeContactNo, "", new { @class = "mb-0" })
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <label for="email">Email *</label>
                            @Html.TextBoxFor(model => model.EmployeeEmail, new { @class = "form-control required", @id = "EEmail" })
                            @Html.ValidationMessageFor(model => model.EmployeeEmail)
                        </div>
                        <div class="col-md-4">
                            <label>TIN *</label>
                            @Html.TextBoxFor(model => model.EmployeeTIN, new { @class = "form-control required", @id = "ECNIC" })
                            @Html.ValidationMessageFor(model => model.EmployeeTIN)
                        </div>
                        <div class="col-md-4">
                            <label>@Html.Raw(Localization.CloudERP.Modules.User.User.Designation) *</label>
                            @Html.TextBoxFor(model => model.EmployeeDesignation, new { @class = "form-control required", @id = "EDesignation" })
                            @Html.ValidationMessageFor(model => model.EmployeeDesignation)
                        </div>
                        <div class="col-md-4">
                            <label>@Html.Raw(Localization.CloudERP.Modules.User.User.BasicSalary) *</label>
                            @Html.TextBoxFor(model => model.EmployeeMonthlySalary, new { @class = "form-control required", @id = "EMonthlySalary", @type = "number" })
                            @Html.ValidationMessageFor(model => model.EmployeeMonthlySalary)
                        </div>
                        <div class="col-md-12">
                            <label>@Html.Raw(Localization.CloudERP.Modules.Supplier.Supplier.Address) *</label>
                            @Html.TextBoxFor(model => model.EmployeeAddress, new { @class = "form-control required", @id = "EAddress" })
                            @Html.ValidationMessageFor(model => model.EmployeeAddress)
                        </div>
                    </div>
                    <p>(*) @Html.Raw(Company.Mandatory)</p>
                </fieldset>
                <h4>
                    @Html.Raw(Company.CompanyProfile)
                    <br>
                    <small>@Html.Raw(Company.EnterCompanyDetails)</small>
                </h4>
                <fieldset>
                    <div class="row">
                        <div class="col-md-6">
                            <label for="name">@Html.Raw(Company.CompanyTitle) *</label>
                            @Html.TextBoxFor(model => model.CompanyName, new { @class = "form-control required", @id = "CName" })
                            @Html.ValidationMessageFor(model => model.CompanyName)
                        </div>
                        <div class="col-md-6">
                            <label for="name">@Html.Raw(Branch.BranchName) *</label>
                            @Html.TextBoxFor(model => model.BranchName, new { @class = "form-control required", @id = "BranchName" })
                            @Html.ValidationMessageFor(model => model.BranchName)
                        </div>
                        <div class="col-md-6">
                            <div class="form-group mb-3">
                                <label for="BranchContact" class="form-label">
                                    @Html.Raw(Company.BranchContact) *
                                </label>
                                <div class="input-group">
                                    <input id="BranchContact" name="BranchContact" type="tel" class="form-control required" />
                                    @Html.ValidationMessageFor(model => model.BranchContact, "", new { @class = "mb-0" })
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <label>@Html.Raw(Company.BranchAddress) *</label>
                            @Html.TextBoxFor(model => model.BranchAddress, new { @class = "form-control required", @id = "BranchAddress" })
                            @Html.ValidationMessageFor(model => model.BranchAddress)
                        </div>
                    </div>
                    <p>(*) @Html.Raw(Company.Mandatory)</p>
                </fieldset>
                <h4>
                    @Html.Raw(Company.Finish)
                    <br>
                    <small>@Html.Raw(Company.PleaseCheckBeforeSubmission)</small>
                </h4>
                <fieldset>
                    <p class="lead">@Html.Raw(Company.OneLastCheck)</p>
                    <input type="submit" value="@Company.SubmitRegistration" class="btn btn-outline-success" />
                </fieldset>
            </div>
        }
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        setTimeout(function () {
            var employeeContactInput = document.querySelector("#EmployeeContactNo");
            var hiddenEmployeeContactInput = document.querySelector("#HiddenEmployeeContactNo");
            var errorMessage = '@Html.Raw(System.Web.HttpUtility.JavaScriptStringEncode(Localization.CloudERP.Messages.Messages.PleaseEnterAValidPhoneNumber))';

            if (employeeContactInput) {
                var employeeContactIti = window.intlTelInput(employeeContactInput, {
                    initialCountry: "auto",
                    geoIpLookup: function (callback) {
                        fetch('https://ipinfo.io/json', { cache: 'reload' })
                            .then(response => response.json())
                            .then(data => callback(data.country))
                            .catch(() => callback('us'));
                    },
                    utilsScript: "https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.13/js/utils.js"
                });

                employeeContactInput.addEventListener("blur", function () {
                    var fullNumber = employeeContactIti.getNumber();
                    hiddenEmployeeContactInput.value = fullNumber;
                });
            }

            var branchContactInput = document.querySelector("#BranchContact");
            var hiddenBranchContactInput = document.querySelector("#HiddenBranchContact");

            if (branchContactInput) {
                var branchContactIti = window.intlTelInput(branchContactInput, {
                    initialCountry: "auto",
                    geoIpLookup: function (callback) {
                        fetch('https://ipinfo.io/json', { cache: 'reload' })
                            .then(response => response.json())
                            .then(data => callback(data.country))
                            .catch(() => callback('us'));
                    },
                    utilsScript: "https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.13/js/utils.js"
                });

                branchContactInput.addEventListener("blur", function () {
                    var fullNumber = branchContactIti.getNumber();
                    hiddenBranchContactInput.value = fullNumber;
                });
            }
        }, 100);
    });

</script>